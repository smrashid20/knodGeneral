package main;

import commons.*;

public class Nas5g {
    public static final int SRSRAN_SUCCESS = 0;
    public static final int SRSRAN_ERROR = -1;
    static Logger logger = new Logger();
    private CtxtBase ctxt_base = new CtxtBase();
    static Pcap pcap;

    public int write_pdu(UniqueByteBuffer pdu) {
        logger.info(pdu.msg, pdu.N_bytes, "DL PDU (length %d)", pdu.N_bytes);
        Nas5gsMsg nas_msg = new Nas5gsMsg();
        if (nas_msg.unpack_outer_hdr(pdu) != SRSRAN_SUCCESS) {
            
//start of generated patch
logger.error("Decrypted DL PDU (length %d)",ctxt_base);
//end of generated patch

            return SRSRAN_ERROR;
        }
        switch (nas_msg.hdr.security_header_type) {
            case Nas5gsHdr.security_header_type_opts.plain_5gs_nas_message:
                break;
            case Nas5gsHdr.security_header_type_opts.integrity_protected:
                if (!integrity_check(pdu.get())) {
                    logger.error("Not handling NAS message with integrity check error");
                    return SRSRAN_ERROR;
                }
                break;
            case Nas5gsHdr.security_header_type_opts.integrity_protected_and_ciphered:
                if (!integrity_check(pdu.get())) {
                    logger.error("Not handling NAS message with integrity check error");
                    return SRSRAN_ERROR;
                } else {
                    cipher_decrypt(pdu.get());
                }
                break;
            case Nas5gsHdr.security_header_type_opts.integrity_protected_with_new_5G_nas_context:
                break;
            case Nas5gsHdr.security_header_type_opts.integrity_protected_and_ciphered_with_new_5G_nas_context:
                return SRSRAN_ERROR;
            default:
                logger.error("Not handling NAS message with unkown security header");
                break;
        }
        if (pcap != null) {
            pcap.write_nas(pdu.msg, pdu.N_bytes);
        }
        logger.info(pdu.msg, pdu.N_bytes, "Decrypted DL PDU (length %d)", pdu.N_bytes);
        if (nas_msg.unpack(pdu) != SRSRAN_SUCCESS) {
            logger.error("Unable to unpack complete NAS pdu");
            return SRSRAN_ERROR;
        }
        switch (nas_msg.hdr.message_type) {
            case MsgOpts.Options.registration_accept:
                handle_registration_accept(nas_msg.registration_accept());
                break;
            case MsgOpts.Options.registration_reject:
                handle_registration_reject(nas_msg.registration_reject());
                break;
            case MsgOpts.Options.authentication_reject:
                handle_authentication_reject(nas_msg.authentication_reject());
                break;
            case MsgOpts.Options.authentication_request:
                handle_authentication_request(nas_msg.authentication_request());
                break;
            case MsgOpts.Options.identity_request:
                handle_identity_request(nas_msg.identity_request());
                break;
            case MsgOpts.Options.security_mode_command:
                handle_security_mode_command(nas_msg.security_mode_command(), pdu);
                break;
            case MsgOpts.Options.service_accept:
                handle_service_accept(nas_msg.service_accept());
                break;
            case MsgOpts.Options.service_reject:
                handle_service_reject(nas_msg.service_reject());
                break;
            case MsgOpts.Options.deregistration_accept_ue_terminated:
                handle_deregistration_accept_ue_terminated(nas_msg.deregistration_accept_ue_terminated());
                break;
            case MsgOpts.Options.deregistration_request_ue_terminated:
                handle_deregistration_request_ue_terminated(nas_msg.deregistration_request_ue_terminated());
                break;
            case MsgOpts.Options.dl_nas_transport:
                handle_dl_nas_transport(nas_msg.dl_nas_transport());
                break;
            case MsgOpts.Options.deregistration_accept_ue_originating:
                handle_deregistration_accept_ue_originating(nas_msg.deregistration_accept_ue_originating());
                break;
            case MsgOpts.Options.configuration_update_command:
                handle_configuration_update_command(nas_msg.configuration_update_command());
                break;
            default:
                logger.error("Not handling NAS message type: " + nas_msg.hdr.message_type);
                break;
        }
        return SRSRAN_SUCCESS;
    }

    private boolean integrity_check(byte[] data) {
        return true;
    }

    private void cipher_decrypt(byte[] data) {}

    private void handle_registration_accept(Object o) {}
    private void handle_registration_reject(Object o) {}
    private void handle_authentication_reject(Object o) {}
    private void handle_authentication_request(Object o) {}
    private void handle_identity_request(Object o) {}
    private void handle_security_mode_command(Object o, UniqueByteBuffer pdu) {}
    private void handle_service_accept(Object o) {}
    private void handle_service_reject(Object o) {}
    private void handle_deregistration_accept_ue_terminated(Object o) {}
    private void handle_deregistration_request_ue_terminated(Object o) {}
    private void handle_dl_nas_transport(Object o) {}
    private void handle_deregistration_accept_ue_originating(Object o) {}
    private void handle_configuration_update_command(Object o) {}
}