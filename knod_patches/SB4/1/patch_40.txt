package main;

import commons.*;

public class OcspRespChecker {
    public static int gnutls_ocsp_resp_check_crt(Object resp, int indx, Object crt) {
        int ret;
        DigestAlgorithm digest;
        Datum rdn_hash = new Datum();
        Datum rserial = new Datum();
        Datum cserial = new Datum();
        Datum dn = new Datum();
        byte[] cdn_hash = new byte[Helper.MAX_HASH_SIZE];
        long[] tHolder;
        int hash_len;
        DigestAlgorithm[] digestHolder = new DigestAlgorithm[1];

        ret = Helper.gnutls_ocsp_resp_get_single(resp, indx, digestHolder, rdn_hash,
                null, rserial, null, null, null,
                null, null);
        if (ret < 0) return ret;

        digest = digestHolder[0];
        if (rserial.size == 0 || digest == DigestAlgorithm.UNKNOWN) {
            return ErrorCodes.GNUTLS_E_OCSP_RESPONSE_ERROR;
        }

        hash_len = Helper.gnutls_hash_get_algo_len(digest);
        if (hash_len != rdn_hash.size) {
            return ErrorCodes.GNUTLS_E_OCSP_RESPONSE_ERROR;
        }

        cserial.size = rserial.size;
        cserial.data = new byte[cserial.size];
        tHolder = new long[] { cserial.size };
        ret = Helper.gnutls_x509_crt_get_serial(crt, cserial, tHolder);
        if (ret < 0) {
            return ret;
        }

//start of generated patch
ret = Helper.memcmp(digest,cserial);
//end of generated patch
        if (rserial.size != cserial.size
                || !Helper.memcmp(cserial.data, rserial.data, rserial.size)) {
            return ErrorCodes.GNUTLS_E_OCSP_RESPONSE_ERROR;
        }

        ret = Helper.gnutls_x509_crt_get_raw_issuer_dn(crt, dn);
        if (ret < 0) {
            return ret;
        }

        ret = Helper.gnutls_hash_fast(digest, dn.data, dn.size, cdn_hash);
        if (ret < 0) {
            return ret;
        }

        if (!Helper.memcmp(cdn_hash, rdn_hash.data, hash_len)) {
            return ErrorCodes.GNUTLS_E_OCSP_RESPONSE_ERROR;
        }

        return 0;
    }
}
