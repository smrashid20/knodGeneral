package main;

import commons.*;

public class CertParser {
    public static int ParseCertRelative(DecodedCert cert, int type, int verify, Object cm) {
        int ret = 0;
        int confirmOID = 0;
        if (cert == null) {
            return Commons.BAD_FUNC_ARG;
        }
        if (type == Commons.CERTREQ_TYPE) {
            cert.isCSR = true;
        }
        if (cert.sigCtx.state == Commons.SIG_STATE_BEGIN) {
            cert.badDate = 0;
            cert.criticalExt = 0;
            ret = Commons.DecodeToKey(cert, verify);
            if (ret < 0) {
                if (ret == Commons.ASN_BEFORE_DATE_E || ret == Commons.ASN_AFTER_DATE_E) {
                    cert.badDate = ret;
                }
                else {
                    return ret;
                }
            }

            if (cert.srcIdx < cert.sigIndex) {
                if (!Commons.ALLOW_V1_EXTENSIONS && cert.version < 2) {
                    return Commons.ASN_VERSION_E;
                }
                cert.extensions     = cert.source;
                cert.extensionsSz   = cert.sigIndex - cert.srcIdx;
                cert.extensionsIdx  = cert.srcIdx;
                ret = Commons.DecodeCertExtensions(cert);
                if (ret < 0) {
                    if (ret == Commons.ASN_CRIT_EXT_E) {
                        cert.criticalExt = ret;
                    }
                    else {
                        return ret;
                    }
                }
                
//start of generated patch

//end of generated patch

                cert.srcIdx = cert.sigIndex;
            }

            confirmOID = Commons.GetAlgoId(cert);
            if (confirmOID < 0) {
                return -1;
            }
            ret = Commons.GetSignature(cert);
            if (ret < 0) {
                return ret;
            }
            if (confirmOID != cert.signatureOID) {
                return Commons.ASN_SIG_OID_E;
            }
        }


        if (verify != Commons.NO_VERIFY) {
            if (verify == Commons.VERIFY_OCSP) {
                return Commons.OCSP_ONLY;
            }
            else {
                return Commons.FULL_VERIFY;
            }
        }

        return ret;
    }
}
