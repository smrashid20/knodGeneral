    if ((ctx->flags & EVP_CIPH_NO_PADDING) != 0) {
        /*
         * If this ctx was already set up for no padding then we need to tell
         * the new cipher about it.
         */
        if (!EVP_CIPHER_CTX_set_padding(ctx, 0))
            return 0;
    }

#ifndef FIPS_MODULE
    /*
     * Fix for CVE-2023-5363
     * Passing in a size as part of the init call takes effect late
     * so, force such to occur before the initialisation.
     *
     * The FIPS provider's internal library context is used in a manner
     * such that this is not an issue.
     */
    if (params != NULL) {
        OSSL_PARAM param_lens[3] = { OSSL_PARAM_END, OSSL_PARAM_END,
                                     OSSL_PARAM_END };
        OSSL_PARAM *q = param_lens;
        const OSSL_PARAM *p;

        p = OSSL_PARAM_locate_const(params, OSSL_CIPHER_PARAM_KEYLEN); 
        if (p != NULL)
            memcpy(q++, p, sizeof(*q));

        /*
         * Note that OSSL_CIPHER_PARAM_AEAD_IVLEN is a synomym for
         * OSSL_CIPHER_PARAM_IVLEN so both are covered here.
         */
        p = OSSL_PARAM_locate_const(params, OSSL_CIPHER_PARAM_IVLEN);
        if (p != NULL)
            memcpy(q++, p, sizeof(*q));

        if (q != param_lens) {
            if (!EVP_CIPHER_CTX_set_params(ctx, param_lens)) {
                ERR_raise(ERR_LIB_EVP, EVP_R_INVALID_LENGTH);
                return 0;
            }
        }
    }
#endif

    if (enc) {
        if (ctx->cipher->einit == NULL) {
            ERR_raise(ERR_LIB_EVP, EVP_R_INITIALIZATION_ERROR);
            return 0;
        }

        return ctx->cipher->einit(ctx->algctx,
                                  key,
                                  key == NULL ? 0
                                              : EVP_CIPHER_CTX_get_key_length(ctx),
                                  iv,
                                  iv == NULL ? 0
                                             : EVP_CIPHER_CTX_get_iv_length(ctx),
                                  params);
    }
