                boolean validSigAlgo = false;
                if (args.sigAlgo == CommonsConstants.ed25519_sa_algo) {
                    Wslib.WOLFSSL_MSG("Peer sent ED25519 sig");
                    validSigAlgo = ssl.peerEd25519KeyPresent;
                }
                if (args.sigAlgo == CommonsConstants.ed448_sa_algo) {
                    Wslib.WOLFSSL_MSG("Peer sent ED448 sig");
                    validSigAlgo = ssl.peerEd448KeyPresent;
                }
                if (args.sigAlgo == CommonsConstants.ecc_dsa_sa_algo) {
                    Wslib.WOLFSSL_MSG("Peer sent ECC sig");
                    validSigAlgo = ssl.peerEccDsaKeyPresent;
                }
                if (args.sigAlgo == CommonsConstants.falcon_level1_sa_algo) {
                    Wslib.WOLFSSL_MSG("Peer sent Falcon Level 1 sig");
                    validSigAlgo = ssl.peerFalconKeyPresent;
                }
                if (args.sigAlgo == CommonsConstants.falcon_level5_sa_algo) {
                    Wslib.WOLFSSL_MSG("Peer sent Falcon Level 5 sig");
                    validSigAlgo = ssl.peerFalconKeyPresent;
                }
                if (args.sigAlgo == CommonsConstants.rsa_sa_algo) {
                    Wslib.WOLFSSL_MSG("Peer sent PKCS#1.5 algo - not valid TLS 1.3");
                    return CommonsConstants.INVALID_PARAMETER;
                }
                if (args.sigAlgo == CommonsConstants.rsa_pss_sa_algo) {
                    Wslib.WOLFSSL_MSG("Peer sent RSA sig");
                    validSigAlgo = ssl.peerRsaKey != null && ssl.peerRsaKeyPresent;
                }
                if (!validSigAlgo) {
                    Wslib.WOLFSSL_MSG("Sig algo doesn't correspond to certificate");
                    return CommonsConstants.SIG_VERIFY_E;
                }
