### lib/dns/zoneverify.c ###
static isc_result_t
check_dnskey_sigs(vctx_t *vctx, const dns_rdata_dnskey_t *dnskey,
		  dns_rdata_t *rdata, bool is_ksk)
{
	unsigned char *active_keys, *standby_keys;
	dns_keynode_t *keynode = NULL;
	bool *goodkey;
	dst_key_t *key = NULL;
	isc_result_t result;

	active_keys = (is_ksk ? vctx->ksk_algorithms : vctx->zsk_algorithms);
	standby_keys = (is_ksk ? vctx->standby_ksk : vctx->standby_zsk);
	goodkey = (is_ksk ? &vctx->goodksk : &vctx->goodzsk);

............
typedef struct vctx {
	isc_mem_t *		mctx;
	dns_zone_t *		zone;
	dns_db_t *		db;
	dns_dbversion_t *	ver;
	dns_name_t *		origin;
	dns_keytable_t *	secroots;
	bool		goodksk;
	bool		goodzsk;
	dns_rdataset_t		keyset;
	dns_rdataset_t		keysigs;
	dns_rdataset_t		soaset;
	dns_rdataset_t		soasigs;
	dns_rdataset_t		nsecset;
	dns_rdataset_t		nsecsigs;
	dns_rdataset_t		nsec3paramset;
	dns_rdataset_t		nsec3paramsigs;
	unsigned char		revoked_ksk[256];
	unsigned char		revoked_zsk[256];
	unsigned char		standby_ksk[256];
	unsigned char		standby_zsk[256];
	unsigned char		ksk_algorithms[256];
	unsigned char		zsk_algorithms[256];
	unsigned char		bad_algorithms[256];
	unsigned char		act_algorithms[256];
	isc_heap_t *		expected_chains;
	isc_heap_t *		found_chains;
} vctx_t;

struct nsec3_chain_fixed {
	uint8_t		hash;
	uint8_t		salt_length;
	uint8_t		next_length;
	uint16_t		iterations;
	/*
	 * The following non-fixed-length data is stored in memory after the
	 * fields declared above for each NSEC3 chain element:
	 *
	 * unsigned char	salt[salt_length];
	 * unsigned char	owner[next_length];
	 * unsigned char	next[next_length];
	 */
};

............
